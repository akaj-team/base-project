apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    def USER_AGENT_APP_NAME = "Example"
    def APP_NAME = "Example"

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'

    defaultConfig {
        applicationId "com.fr.circle"
        minSdkVersion 21
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 1
        versionName "0.0.5"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        ext.betaDistributionReleaseNotesFilePath = "release_notes.txt"
    }

    signingConfigs {
        debug {
            storeFile file('../keystores/debug.jks')
        }

        alpha {
            if (System.getenv('CI')) {
                storeFile file('../keystores/debug.jks')
                storePassword "android"
                keyAlias "androiddebugkey"
                keyPassword "android"
            }
        }

        production {
            if (!System.getenv('CI')) {
                storeFile file("../keystores/release.jks")
                storePassword ""
                keyAlias ""
                keyPassword ""
            }
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue("bool", "FIREBASE_CRASH_ENABLED", "true")
        }

        alpha {
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.alpha
            resValue("bool", "FIREBASE_CRASH_ENABLED", "true")
        }

        staging {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".staging"
            signingConfig signingConfigs.debug
            ext.betaDistributionGroupAliases = "at-testers, at-devs"
            resValue("bool", "FIREBASE_CRASH_ENABLED", "true")
        }

        debug {
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
            ext.betaDistributionGroupAliases = "at-testers, at-devs"
            testCoverageEnabled = true
            resValue("bool", "FIREBASE_CRASH_ENABLED", "false")
        }
    }

    applicationVariants.all { variant ->
        switch (variant.getName()) {
            case "debug": //Level 5
                variant.resValue("string", "app_name", "[DEV] ${APP_NAME}")
                variant.buildConfigField "String", "APP_NAME", "\"${APP_NAME}\""
                variant.buildConfigField "String", "USER_AGENT_APP_NAME", "\"${USER_AGENT_APP_NAME}\""
                variant.buildConfigField "String", "BASE_API_URL", '"https://vnshipperman.000webhostapp.com/"'
                variant.buildConfigField "String", "BASE_IMAGE_URL", '"https://vnshipperman.000webhostapp.com/uploads/"'
                break
            case "staging": //Level 4
                variant.resValue("string", "app_name", "[STG]${APP_NAME}")
                variant.buildConfigField "String", "APP_NAME", "\"${APP_NAME}\""
                variant.buildConfigField "String", "USER_AGENT_APP_NAME", "\"${USER_AGENT_APP_NAME}\""
                variant.buildConfigField "String", "BASE_API_URL", '"https://vnshipperman.000webhostapp.com/"'
                variant.buildConfigField "String", "BASE_IMAGE_URL", '"https://vnshipperman.000webhostapp.com/uploads/"'
                break
            case "alpha": //Level 3
                variant.resValue("string", "app_name", "${APP_NAME}")
                variant.buildConfigField "String", "APP_NAME", "\"${APP_NAME}\""
                variant.buildConfigField "String", "USER_AGENT_APP_NAME", "\"${USER_AGENT_APP_NAME}\""
                variant.buildConfigField "String", "BASE_API_URL", '"https://vnshipperman.000webhostapp.com/"'
                variant.buildConfigField "String", "BASE_IMAGE_URL", '"https://vnshipperman.000webhostapp.com/uploads/"'
                break
            case "release":
                variant.resValue("string", "app_name", "${APP_NAME}")
                variant.buildConfigField "String", "APP_NAME", "\"${APP_NAME}\""
                variant.buildConfigField "String", "USER_AGENT_APP_NAME", "\"${USER_AGENT_APP_NAME}\""
                variant.buildConfigField "String", "BASE_API_URL", '"https://"'
                variant.buildConfigField "String", "BASE_IMAGE_URL", '"https://vnshipperman.000webhostapp.com/uploads/"'
        }
    }

    lintOptions {
        abortOnError false
        lintConfig file('lint.xml')
        xmlOutput file("${buildDir}/reports/lint-results.xml")
    }

    dexOptions {
        jumboMode = true
    }

    testOptions {
        unitTests.all {
            setIgnoreFailures(true)
            include "**/*Test.class"
            exclude "**/element/*Test.class"
        }
        unitTests.returnDefaultValues = true
    }
}

androidExtensions {
    experimental = true
}

kotlin {
    experimental {
        coroutines "enable"
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'com.android.support:multidex:1.0.3'

    // Retrofit 2
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'

    // Common
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.android.support:design:28.0.0'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.2'

    // Glide
    implementation('com.github.bumptech.glide:glide:4.5.0') {
        exclude group: "com.android.support"
    }
    kapt 'com.github.bumptech.glide:compiler:4.5.0'

    //Rxjava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.5'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // Anko Layouts
    implementation "org.jetbrains.anko:anko-sdk25:$anko_version"
    // sdk15, sdk19, sdk21, sdk23 are also available
    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
    implementation "org.jetbrains.anko:anko-coroutines:$anko_version"

    // Coroutine listeners for Anko Layouts
    implementation "org.jetbrains.anko:anko-sdk25-coroutines:$anko_version"
    implementation "org.jetbrains.anko:anko-appcompat-v7-coroutines:$anko_version"
    implementation "org.jetbrains.anko:anko-commons:$anko_version"

    implementation "org.jetbrains.anko:anko-recyclerview-v7:$anko_version"
    implementation "org.jetbrains.anko:anko-recyclerview-v7-coroutines:$anko_version"

    implementation "org.jetbrains.anko:anko-design:$anko_version"
    implementation "org.jetbrains.anko:anko-design-coroutines:$anko_version"

    // Dependencies for local unit tests
    testImplementation "junit:junit:4.12"
    testImplementation 'org.mockito:mockito-inline:2.11.0'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.9.1'
    testImplementation "org.robolectric:robolectric:3.6.1"
}

apply from: "jacoco.gradle"
